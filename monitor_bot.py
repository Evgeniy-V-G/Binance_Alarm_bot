from binance.um_futures import UMFutures
import time
import datetime
import json
import telebot
import psutil                                       ### –¥–ª—è –ª–æ–≥–æ–≤ –∫–æ–Ω—Ç—Ä–æ–ª—è –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏   -eg-
import gc
from typing import List, Dict                       ### –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π                   -eg-


# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
EMOJI_LEVELS = ["üòü", "üòßüòß", "üò±üò±üò±"]          # –≤–∏–∑—É–∞–ª—å–Ω—ã–µ –º–µ—Ç–∫–∏ —É—Ä–æ–≤–Ω–µ–π —É–±—ã—Ç–∫–∞
HEADERS = ["–°—á—ë—Ç", "–ù–µ—Ä–µ–∞–ª.—É–±—ã—Ç–æ–∫", "–ë–∞–ª–∞–Ω—Å", "–î–æ—Å—Ç—É–ø.–º–∞—Ä–∂–∞", "–û—Ç–∫—Ä.–ø–æ–∑–∏—Ü–∏–π"]  # –∑–∞–≥–æ–ª–æ–≤–∫–∏ –µ–∂–µ—á–∞—Å–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã 
WIDTHS = [12, 17, 12, 16, 10]                       # —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫ –µ–∂–µ—á–∞—Å–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã 
PERIOD = 0.25                                       # –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–æ–∫ –≤ –º–∏–Ω—É—Ç–∞—Ö (0.25 == 15 —Å–µ–∫.)
LOSS_THRESHOLDS = [5, 15, 50]                       # —É—Ä–æ–≤–Ω–∏ —Ç—Ä–µ–≤–æ–≥–∏ –ø–æ –µ–¥.—É–±—ã—Ç–∫—É –ø–æ –º–æ–Ω–µ—Ç–µ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö
# LOSS_THRESHOLDS = [0.1, 0.2, 0.3]                 # –æ—Ç–ª–∞–¥–∫–∞, —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ                     -eg-

min_minutes = -1                                    # –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —Å–ø–∞–º)
min_position = 0                                    # –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–∑–∏—Ü–∏–∏ (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —Å–ø–∞–º)

# Telegram –ø–∞—Ä–∞–º–µ—Ç—Ä—ã                                # üîí –∫–ª—é—á–∏ –∏–∑–º–µ–Ω–µ–Ω—ã
TG_BOT_TOKEN = "7656400000:AAE9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"   ### t.me/XX_drawer_bot   (–ï–ì)
# ALARM_TG = "-10023XXXXXXXX"
# ERROR_TG = '-10023XXXXXXXX'     ### t.me/XX_err   -eg-
ERROR_TG = "-10023XXXXXXXX"       ### –ú–æ–Ω–∏—Ç–æ—Ä —Å—á–µ—Ç–æ–≤ https://t.me/c/23046XXXXX/6
ACCOUNT_TG = "-10023XXXXXXXX"     ### https://t.me/+LltLXXXXXXXXXXXX  https://t.me/c/23046XXXXX/5
# ALARM_TG = "-10023XXXXXXXX"     ### https://t.me/+LltLXXXXXXXXXXXX –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≤—Å—ë —à–ª—é –≤ –≥—Ä—É–ø–ø—É XX -eg-
# LOGS_TG =  '-10023XXXXXXXX'     ### t.me/XX_logs  -eg-
ALARM_TG = "-10023XXXXXXXX"       ### https://t.me/c/23046XXXXX/5  https://t.me/+LltLXXXXXXXXXXXX

bot = telebot.TeleBot(TG_BOT_TOKEN)

client_0 = UMFutures()                                                      ### —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö, –±–µ–∑ —Ç–æ—Ä–≥–æ–≤–ª–∏ -eg-
if True:
                                                                                                                                                                                                                                    key = "JzDnyDXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"       # 400
                                                                                                                                                                                                                                    secret = "NWppc6XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
client400 = UMFutures(key, secret)
if True:
                                                                                                                                                                                                                                    key = "JzDnyDXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"       # 402
                                                                                                                                                                                                                                    secret = "NWppc6XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
client402 = UMFutures(key, secret)
if True:
                                                                                                                                                                                                                                    key =  "JzDnyDXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"      # 399
                                                                                                                                                                                                                                    secret = "NWppc6XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
client399 = UMFutures(key, secret)
if True:
                                                                                                                                                                                                                                    API_KEY = "JzDnyDXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"  #401
                                                                                                                                                                                                                                    API_SECRET = "NWppc6XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
client401 = UMFutures(API_KEY, API_SECRET)
if True:
                                                                                                                                                                                                                                    key = "JzDnyDXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"       # 1231
                                                                                                                                                                                                                                    secret = "NWppc6XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
client1231 = UMFutures(key, secret)
if True:
                                                                                                                                                                                                                                    key = "JzDnyDXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"       # 1230
                                                                                                                                                                                                                                    secret = "NWppc6XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
client1230 = UMFutures(key, secret)
if True:
                                                                                                                                                                                                                                    key = "JzDnyDXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"       # 1035
                                                                                                                                                                                                                                    secret = "NWppc6XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
client1035 = UMFutures(key, secret)
if True:
                                                                                                                                                                                                                                    key = "JzDnyDXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"       # 403
                                                                                                                                                                                                                                    secret = "NWppc6XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
client403 = UMFutures(key, secret)
if True:
                                                                                                                                                                                                                                    key = "JzDnyDXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"       # 1036
                                                                                                                                                                                                                                    secret = "NWppc6XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
client1036 = UMFutures(key, secret)
if True:
                                                                                                                                                                                                                                    key = "JzDnyDXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"       # 1037
                                                                                                                                                                                                                                    secret = "NWppc6XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
client1037 = UMFutures(key, secret)
if True:
                                                                                                                                                                                                                                    key = "JzDnyDXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"       # 1038
                                                                                                                                                                                                                                    secret = "NWppc6XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
client1038 = UMFutures(key, secret)
if True:
                                                                                                                                                                                                                                    key = "JzDnyDXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"       # 1039
                                                                                                                                                                                                                                    secret = "NWppc6XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
client1039 = UMFutures(key, secret)
if True:
                                                                                                                                                                                                                                    key = "JzDnyDXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"       # 1040
                                                                                                                                                                                                                                    secret = "NWppc6XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
client1040 = UMFutures(key, secret)
if True:
                                                                                                                                                                                                                                    key = "JzDnyDXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"       # 1041
                                                                                                                                                                                                                                    secret = "NWppc6XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
client1041 = UMFutures(key, secret)
if True:
                                                                                                                                                                                                                                    key = "JzDnyDXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"       # 1042
                                                                                                                                                                                                                                    secret = "NWppc6XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
client1042 = UMFutures(key, secret)
if True:
                                                                                                                                                                                                                                    key = "JzDnyDXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"       # 1043
                                                                                                                                                                                                                                    secret = "NWppc6XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
client1043 = UMFutures(key, secret)
if True:
                                                                                                                                                                                                                                    key = "JzDnyDXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"       # 1044
                                                                                                                                                                                                                                    secret = "NWppc6XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
client1044 = UMFutures(key, secret)
if True:
                                                                                                                                                                                                                                    key = "JzDnyDXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"       # 1229
                                                                                                                                                                                                                                    secret = "NWppc6XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
client1229 = UMFutures(key, secret)
if True:
                                                                                                                                                                                                                                    key = "JzDnyDXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"       # 1232
                                                                                                                                                                                                                                    secret = "NWppc6XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
client1232 = UMFutures(key, secret)
if True:
                                                                                                                                                                                                                                    key = "JzDnyDXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"       # 1233
                                                                                                                                                                                                                                    secret = "NWppc6XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
client1233 = UMFutures(key, secret)                 # —Å–æ–∑–¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç—ã –ø–æ –≤—Å–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–º —Å—á–µ—Ç–∞–º

# –∫–æ—Ä—Ç–µ–∂ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
client_tpl = (
    client399, client400, client401, client402, client403,
    client1035, client1036, client1037, client1038, client1039,
    client1040, client1041, client1042, client1043, client1044,
    client1229, client1230, client1231, client1232, client1233
)
# —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–æ–º–µ—Ä–æ–≤ —Å—á–µ—Ç–æ–≤                       ### –ó–î–ï–°–¨ –£–ö–ê–ñ–ò–¢–ï –°–í–û–ò –ù–û–ú–ï–†–ê/–ú–ï–¢–ö–ò –°–ß–ï–¢–û–í ###  -eg-
account_ids = ["399", "400", "401", "402", "403",
               "1035", "1036", "1037", "1038", "1039",
               "1040", "1041", "1042", "1043", "1044",
               "1229", "1230", "1231", "1232", "1233"]

already_sent = {aid: {} for aid in account_ids}     # —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
last_report_hour = -1                               # —á–∞—Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
disconnected_counter = 0                            # —Å—á—ë—Ç—á–∏–∫ –¥–∏—Å–∫–æ–Ω–Ω–µ–∫—Ç–æ–≤

def load_state() -> List:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞ 'time_last_check.txt'

    –ü–æ–≤—Ç–æ—Ä—è–µ—Ç –ø–æ–ø—ã—Ç–∫—É —á—Ç–µ–Ω–∏—è –¥–æ 10 —Ä–∞–∑ —Å —É–≤–µ–ª–∏—á–∏–≤–∞—é—â–µ–π—Å—è –∑–∞–¥–µ—Ä–∂–∫–æ–π –º–µ–∂–¥—É –Ω–∏–º–∏
    –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    Returns:
        List: [–≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏, –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç—á—ë—Ç–∞, —Ñ–ª–∞–≥ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —ç—Ç–æ—Ç —á–∞—Å, –¥–µ–Ω—å –º–µ—Å—è—Ü–∞]
    """
    for delay in range(10):
        try:
            with open('/projects/Alarm_bot/time_last_check.txt', 'r') as f:
                return json.loads(f.read())
        except:
            print("delay =", delay, flush=True)
            time.sleep(0.5 + 0.5 * delay)

    # –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è, —Ç–µ–∫—É—â–µ–µ - 15 —á–∞—Å–æ–≤, —Ñ–ª–∞–≥ –ø—Ä–æ–≤–µ—Ä–∫–∏, —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
    return [time.time(), time.time() - 15 * 60 * 60, 0, datetime.datetime.now().day]


def save_state(time_last_check: float, time_last_drawn: float, hour_check_1h_vj: int, check_day_vj: int) -> None:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ —Ñ–∞–π–ª 'time_last_check.txt'

    Args:
        time_last_check (float): –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        time_last_drawn (float): –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç—á—ë—Ç–∞
        hour_check_1h_vj (int): –§–ª–∞–≥ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —ç—Ç–æ—Ç —á–∞—Å
        check_day_vj (int): –î–µ–Ω—å –º–µ—Å—è—Ü–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    """
    try:
        with open('/projects/Alarm_bot/time_last_check.txt', 'w') as f:
            f.write(json.dumps([time_last_check, time_last_drawn, hour_check_1h_vj, check_day_vj]))
    except Exception as e:
        bot.send_message(ERROR_TG, f'!!! Alarm_bot: time_last_check save fail !!!\n{e}')


def load_already_sent() -> Dict[str, Dict[str, int]]:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤ –ø–æ —Å—á–µ—Ç–∞–º –∏–∑ —Ñ–∞–π–ª–∞ 'already_sent.txt'.

    –û–±–Ω–æ–≤–ª—è–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–π —Ñ–æ—Ä–º–∞—Ç (—Å–ø–∏—Å–æ–∫) –≤ —Å–ª–æ–≤–∞—Ä—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.

    Returns:
        Dict[str, Dict[str, int]]: —Å–ª–æ–≤–∞—Ä—å {account_id: {symbol: –æ—Ç–º–µ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏}}
    """
    try:
        with open('/projects/Alarm_bot/already_sent.txt', 'r') as f:
            raw = json.loads(f.read())

            # –º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç (—Å–ø–∏—Å–æ–∫) –Ω–∞ —Å–ª–æ–≤–∞—Ä—å
            for k, v in raw.items():
                if isinstance(v, list):
                    raw[k] = {symb: 0 for symb in v}

            return raw
    except:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å ‚Äî –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å
        return {aid: {} for aid in account_ids}


def save_already_sent(already_sent: Dict[str, Dict[str, int]]) -> None:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ª–æ–≤–∞—Ä—å —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ñ–∞–π–ª 'already_sent.txt'

    Args:
        already_sent (Dict[str, Dict[str, int]]): –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    try:
        with open('/projects/Alarm_bot/already_sent.txt', 'w') as f:
            f.write(json.dumps(already_sent))
    except Exception as e:
        bot.send_message(ERROR_TG, f'!!! Alarm_bot: already_sent save fail !!!\n{e}')


def get_formatted_time(timestamp: float) -> str:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –≤ —Å—Ç—Ä–æ–∫—É —á–∏—Ç–∞–µ–º–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞

    Args:
        timestamp (float): –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö

    Returns:
        str: –°—Ç—Ä–æ–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ "%Y-%m-%d %H:%M:%S"
    """
    dt_object = datetime.datetime.fromtimestamp(timestamp / 1000.0)
    return dt_object.strftime("%Y-%m-%d %H:%M:%S")


def send_hourly_report(accounts_data: List[Dict], time_last_drawn: float) -> float:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á—ë—Ç –ø–æ –≤—Å–µ–º —Å—á–µ—Ç–∞–º –≤ Telegram —Ä–∞–∑ –≤ —á–∞—Å –≤ –ø–µ—Ä–≤—ã–µ 5 –º–∏–Ω—É—Ç

    –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è —Ç–∞–∫–∂–µ –∑–∞–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏ –≤ —á–∞—Ç —Å –ª–æ–≥–∞–º–∏ –æ—à–∏–±–æ–∫

    Args:
        accounts_data (List[Dict]): –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö —Å—á–µ—Ç–æ–≤ 
        time_last_drawn (float): –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á—ë—Ç–∞

    Returns:
        float: –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç—á—ë—Ç–∞
    """
    now = time.gmtime()
    current_time = time.time()
    current_minute = now.tm_min

    # # === –û–¢–õ–ê–î–ö–ê: –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç ===
    # if current_minute % 10 != 0:
    #     return time_last_drawn  # –Ω–∏—á–µ–≥–æ –Ω–µ —à–ª—ë–º

    # # –µ—Å–ª–∏ –æ—Ç—á—ë—Ç —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª—Å—è –≤ —ç—Ç—É –∂–µ –º–∏–Ω—É—Ç—É ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    # if current_time - time_last_drawn < 60:
    #     return time_last_drawn
    # === –ü–†–û–î: –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∞–∑ –≤ —á–∞—Å, –≤ –ø–µ—Ä–≤—ã–µ 5 –º–∏–Ω—É—Ç —á–∞—Å–∞ ===
    if current_minute > 5:
        return time_last_drawn
    if current_time - time_last_drawn < 55 * 60:
        return time_last_drawn

    # ==== –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É –æ—Ç—á—ë—Ç–∞ ====
    line_format = "".join([f"{{:<{w}}}" for w in WIDTHS])
    lines = [line_format.format(*HEADERS)]

    for acc in accounts_data:
        row = [
            str(acc["name"]),
            f"{(round(acc['unreal_loss'], 2))}",
            f"{int(round(acc['balance'], 0))}",
            f"{int(round(acc['available_margin'], 0))}",
            str(int(acc["trades"]))
        ]
        lines.append(line_format.format(*row))

    message = "'''\n" + "\n".join(lines) + "\n'''"
    bot.send_message(ACCOUNT_TG, message, parse_mode="Markdown")

    time.sleep(1)

    # –ª–æ–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏ –≤ —á–∞—Ç –æ—Ç–ª–∞–¥–∫–∏
    mem = psutil.Process().memory_info().rss / 1024 ** 2
    bot.send_message(ERROR_TG, f"[Hourly] –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {mem:.2f} –ú–ë")

    return current_time

# –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def try_to_draw(
    time_last_check: float,     # –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—á–µ—Ç–æ–≤ –≤ timestamp
    time_last_drawn: float,     # –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –æ—Ç—á—ë—Ç–∞ –≤ timestamp
    hour_check_1h_vj,           # –æ–±—ä–µ–∫—Ç/—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Å–ª–µ–∂–µ–Ω–∏—è –∑–∞ –ø–æ—á–∞—Å–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é
    check_day_vj,               # –æ–±—ä–µ–∫—Ç/—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Å–ª–µ–∂–µ–Ω–∏—è –∑–∞ –¥–Ω–µ–≤–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é
    already_sent: Dict,         # —Å–ª–æ–≤–∞—Ä—å, –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é—â–∏–π —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    disconnected_counter: int   # —Å—á—ë—Ç—á–∏–∫ –æ–±—Ä—ã–≤–æ–≤ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
):
    if time.time() < time_last_check:
        # print("try_to_draw starts", flush=True)
        time.sleep(5)                               # –ø–∞—É–∑–∞ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        return time_last_check, time_last_drawn, disconnected_counter

    now = datetime.datetime.now()
    print(f"[{now.strftime('%H:%M:%S')}] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—á–µ—Ç–æ–≤ t_check={get_formatted_time(time_last_check * 1000 + 3 * 60 * 60 * 1000)[5:]}", flush=True)

    # print("t=", get_formatted_time(time_last_check * 1000 + 3 * 60 * 60 * 1000)[5:], end="\t")
    time_last_check += PERIOD * 60                  # –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–Ω—Ç–µ—Ä–≤–∞–ª—É
    save_state(time_last_check, time_last_drawn, hour_check_1h_vj, check_day_vj)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    accounts_data = []                              # –¥–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö —Å—á–µ—Ç–æ–≤ –¥–ª—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á—ë—Ç–∞
    for acc_key, clientx in zip(account_ids, client_tpl):  # –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º —Å—á–µ—Ç–∞
        try:
            # print("for acc_key, clientx starts. acc_key=", acc_key, flush=True)
            time.sleep(0.2)
            acc = clientx.account(recvWindow=500000, no_cache=True)  # –∑–∞–ø—Ä–æ—Å —Å—á–µ—Ç–∞

            # print(f"\n==== {acc_key} ====")       ### –æ—Ç–ª–∞–¥–∫–∞                                     -eg-
            # active_positions = [pos for pos in acc["positions"] if float(pos["positionAmt"]) != 0.0]
            # if not active_positions:
            #     print("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π.")
            # else:
            #     for pos in active_positions:
            #         print(f"{pos['symbol']}: amt={pos['positionAmt']}, unreal={pos['unrealizedProfit']}")

            total_balance = float(acc["totalWalletBalance"])    # –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞
            available_margin = float(acc["availableBalance"])   # –¥–æ—Å—Ç—É–ø–Ω–∞—è –º–∞—Ä–∂–∞
            if total_balance <= 0.01:
                already_sent[acc_key] = {}
                continue

            positions = []                          # –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ —Å—á–µ—Ç—É
            for dct in acc["positions"]:
                pos_amt = float(dct["positionAmt"])
                if pos_amt != 0.0:
                    print(f"[{acc_key}] ‚ö†Ô∏è {dct['symbol']} amt={pos_amt}, unreal={dct['unrealizedProfit']}, entry={dct['entryPrice']}, time={get_formatted_time(dct['updateTime'])}", flush=True)

                if pos_amt == 0.0:
                    continue
                entry_price = float(dct["entryPrice"])
                unreal = float(dct["unrealizedProfit"])
                update_time = get_formatted_time(dct["updateTime"])
                pos_value = -entry_price * pos_amt  # –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—ä—ë–º –ø–æ–∑–∏—Ü–∏–∏

                ###################### –±–ª–æ–∫ –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —á–∏—Å–ª–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –±—É–¥—É—â–µ–º   -eg- ##################
                # if update_time >= get_formatted_time(time.time()*1000 - min_minutes*60*1000):
                #     continue
                # update_ts = dct["updateTime"] / 1000  # –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
                # if min_minutes > 0 and update_ts >= time.time() - min_minutes * 60:
                #     continue
                # if pos_value <= min_position:
                # # or unreal >= -min_loss:
                #     continue
                ###################### –∫–æ–Ω–µ—Ü –±–ª–æ–∫–∞ –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —á–∏—Å–ª–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –±—É–¥—É—â–µ–º ##################

                positions.append({
                    "symbol": dct["symbol"],
                    "loss": unreal,
                    "pos": round(pos_value, 2),
                    "entry": entry_price,
                    "amt": pos_amt,
                    "lev": dct["leverage"],
                    "update": update_time,
                    "notional": -float(dct["notional"])
                })

            # –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á—ë—Ç–∞ (–ø—É—Å—Ç—ã–µ —Å—á–µ—Ç–∞ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç, –º–µ–Ω–µ–µ 1 —Ü–µ–Ω—Ç–∞)
            if total_balance >= 0.01:
                accounts_data.append({
                    "name": acc_key,
                    "balance": total_balance,
                    "unreal_loss": sum(p["loss"] for p in positions),
                    "available_margin": round(available_margin, 2),
                    "trades": len(positions)
                })
                print(accounts_data[-1], flush=True)

            # ======== –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–≤–æ–≥–∏ –ø–æ –º–∞—Ä–∂–µ ========
            # if total_balance > 0.01:
                margin_pct = (available_margin / total_balance) * 100   # % —Å–≤–æ–±–æ–¥–Ω–æ–π –º–∞—Ä–∂–∏
                emoji = ""
                level = -1
                if margin_pct < 5:
                # if margin_pct < 90:               ### –æ—Ç–ª–∞–¥–∫–∞                                     -eg-
                    emoji = "‚õîÔ∏è‚õîÔ∏è‚õîÔ∏è‚õîÔ∏è"
                    level = 3
                elif margin_pct < 25:
                # if margin_pct < 95:               ### –æ—Ç–ª–∞–¥–∫–∞                                     -eg-
                    emoji = "üü•üü•üü•‚¨ú"
                    level = 2
                elif margin_pct < 50:
                # if margin_pct < 99:               ### –æ—Ç–ª–∞–¥–∫–∞                                     -eg-
                    emoji = "üü•üü•‚¨ú‚¨ú"
                    level = 1

                if level > 0:
                    prev_level = already_sent[acc_key].get("margin_level", -1)
                    last_sent_minute = already_sent[acc_key].get("margin_minute", -10)
                    now_minute = int(time.time() // 60)
                    allow_repeat = (level == 3 and now_minute - last_sent_minute >= 5)  # –ø–æ–≤—Ç–æ—Ä —Ç—Ä–µ–≤–æ–≥–∏ —Ä–∞–∑ –≤ 5 –º–∏–Ω –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–º —É—Ä–æ–≤–Ω–µ

                    if level > prev_level or allow_repeat:
                        unreal = sum(float(pos["unrealizedProfit"]) for pos in acc["positions"])
                        max_loss_pos = max(
                            acc["positions"], key=lambda p: abs(float(p["unrealizedProfit"])), default=None
                        )
                        if max_loss_pos and "symbol" in max_loss_pos:
                            max_symbol = max_loss_pos["symbol"].upper()
                        else:
                            max_symbol = "?"

                        prefix = "–°–û–•–†–ê–ù–Ø–ï–¢–°–Ø: " if (level == 3 and prev_level == 3) else ""
                        msg = (
                            f"{prefix}{emoji} –°–ß–Å–¢ {acc_key}: –º–∞—Ä–∂–∞ {margin_pct:.0f}% –∏–∑ {total_balance:.0f}$, "
                            f"–ú–ü–£ = {unreal:.0f}"
                        )
                        if level >= 2:
                            msg += f", –º–∞–∫—Å –ø–æ {max_symbol}"

                        bot.send_message(ALARM_TG, msg)
                        already_sent[acc_key]["margin_level"] = level
                        already_sent[acc_key]["margin_minute"] = now_minute

                if margin_pct >= 60:
                    already_sent[acc_key].pop("margin_level", None)
                    already_sent[acc_key].pop("margin_minute", None)

            if not positions:
                already_sent[acc_key] = {}
                continue

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–µ–≤–æ–∂–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            for row in positions:                   # –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏ –ø–æ –ø–æ—Ä–æ–≥–∞–º —É–±—ã—Ç–∫–∞
                symb = row["symbol"]
                loss_abs = -row["loss"]
                sent_level = already_sent[acc_key].get(symb, -1)

                for i, threshold in reversed(list(enumerate(LOSS_THRESHOLDS))):
                    if loss_abs >= threshold and i > sent_level:
                        msg = (f"{acc_key}: {symb} {EMOJI_LEVELS[i]} loss={loss_abs:.2f} "
                            f"pos={row['pos']} from {row['update']}, amt={row['amt']}, "
                            f"entryPrice={row['entry']:.2f}, lev={row['lev']}, notional={row['notional']:.2f}")
                        print(msg, flush=True)
                        bot.send_message(ALARM_TG, msg)
                        already_sent[acc_key][symb] = i
                        break

        ######################## –±–ª–æ–∫ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–ø–∞—Å–º–∞ –æ—Ç —á–∞—Å—Ç—ã—Ö –¥–∏—Å–∫–æ–Ω–Ω–µ–∫—Ç–æ–≤   -eg- #########
        # except Exception as e:
        #     if "RemoteDisconnected" in str(e) and disconnected_counter < 20:
        #         disconnected_counter += 1
        #         print("Warning: RemoteDisconnected, ignored.")
        #     else:
        #         bot.send_message(ERROR_TG, f'Alarm_bot error on acc {acc_key}\n\n{e}')
        ######################## –∫–æ–Ω–µ—Ü –±–ª–æ–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–ø–∞—Å–º–∞ –æ—Ç —á–∞—Å—Ç—ã—Ö –¥–∏—Å–∫–æ–Ω–Ω–µ–∫—Ç–æ–≤ #########

        except Exception as e:
            import traceback
            err_text = f'Alarm_bot error on acc {acc_key}\n\n{type(e).__name__}: {e}'
            bot.send_message(ERROR_TG, err_text)
            print(traceback.format_exc())           # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å —Å–∫—Ä–∏–Ω–∞

        del acc                                     # —Ä—É—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏
        gc.collect()                                # —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞

    time_last_drawn = send_hourly_report(accounts_data, time_last_drawn)  # –æ—Ç—á—ë—Ç –∫–∞–∂–¥—ã–π —á–∞—Å

    return time_last_check, time_last_drawn, disconnected_counter


# ======= –ó–ê–ü–£–°–ö =========
bot.send_message(ERROR_TG, f'Alarm_bot restarted, –ü–∞–º—è—Ç—å: {psutil.Process().memory_info().rss / 1024 ** 2:.2f} –ú–ë')


if __name__ == "__main__":
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ —Ä–∞–Ω–µ–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    time_last_check, time_last_drawn, hour_check_1h_vj, check_day_vj = load_state()
    already_sent = load_already_sent()
    try:
        while True:
            # –ì–ª–∞–≤–Ω–∞—è —Ä–∞–±–æ—á–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –æ–±–Ω–æ–≤–ª—è—é—â–∞—è –∫–ª—é—á–µ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ —à–ª—é—â–∞—è –≤—Å—ë
            time_last_check, time_last_drawn, disconnected_counter = try_to_draw(
                time_last_check,
                time_last_drawn,
                hour_check_1h_vj,
                check_day_vj,
                already_sent,
                disconnected_counter
            )

            save_already_sent(already_sent)

            # # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏:
            # print("__main__. acc_key=", time_last_check, time_last_drawn, disconnected_counter, flush=True)

            time.sleep(1)

    except KeyboardInterrupt:
        bot.send_message(ERROR_TG, f'!!! Alarm_bot KeyboardInterrupt !!!')
        print("\n Alarm_bot KeyboardInterrupt.", flush=True)
